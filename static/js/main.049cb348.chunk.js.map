{"version":3,"sources":["Header/index.jsx","Projects/index.jsx","Home/index.jsx","Contacts/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Image","src","roundedCircle","to","Projects","Card","style","width","backgroundColor","margin","Img","variant","Body","Title","Home","href","download","Contacts","App","path","render","exact","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iXA4BeA,G,MApBA,WACX,OACI,kBAAC,WAAD,KACI,yBAAMC,UAAU,OACZ,yBAAKA,UAAU,SACX,yBAAKA,UAAU,mBACX,kBAACC,EAAA,EAAD,CAAQC,IAAI,kBAAkBC,eAAa,KAE/C,wBAAIH,UAAU,eACV,4BAAI,kBAAC,IAAD,CAAMI,GAAG,WAAT,UACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,oBAAT,aACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,oBAAT,mBC6BbC,EAvCE,WACb,OACI,yBAAKL,UAAU,WACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,SACX,yCAEJ,yBAAKA,UAAU,iBACX,kBAAC,IAAD,CAAMA,UAAU,aAAaI,GAAG,eAC5B,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,gBAAiB,UAAWC,OAAQ,UACnE,kBAACJ,EAAA,EAAKK,IAAN,CAAUC,QAAQ,MAAMV,IAAI,uEAC5B,kBAACI,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,0BAIR,kBAAC,IAAD,CAAMd,UAAU,aAAaI,GAAG,eAC5B,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,gBAAiB,UAAWC,OAAQ,UACnE,kBAACJ,EAAA,EAAKK,IAAN,CAAUC,QAAQ,MAAMV,IAAI,oBAC5B,kBAACI,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,iCAIR,kBAAC,IAAD,CAAMd,UAAU,aAAaI,GAAG,eAC5B,kBAACE,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,gBAAiB,UAAWC,OAAQ,WACnE,kBAACJ,EAAA,EAAKK,IAAN,CAAUC,QAAQ,MAAMV,IAAI,6GAC5B,kBAACI,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,mCCpBbC,G,MAbF,WACT,OACI,yBAAKf,UAAU,WACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,wCAAa,+CACb,yJACA,uBAAGA,UAAU,cAAcgB,KAAK,mBAAmBC,UAAQ,GAA3D,mBCGDC,G,MAXE,WACb,OACI,yBAAKlB,UAAU,WACX,kBAAC,EAAD,MACA,4CCeGmB,MAZf,WACE,OACI,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAWC,OAAQN,EAAMO,OAAK,IAC1C,kBAAC,IAAD,CAAOF,KAAK,mBAAoBC,OAAQhB,IACxC,kBAAC,IAAD,CAAOe,KAAK,mBAAoBC,OAAQH,OCL5BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.049cb348.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport './index.css';\nimport { Image} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Link\n} from 'react-router-dom';\n\nconst Header = () => {\n    return(\n        <Fragment>\n            <div  className=\"nav\" >\n                <div className=\"inner\">\n                    <div className='image-container'>\n                        <Image  src=\"/my-app/img.jpg\" roundedCircle  />\n                    </div>\n                    <ul className=\"header-menu\">\n                        <li><Link to=\"/my-app\">About</Link></li>\n                        <li><Link to=\"/my-app/projects\">Projects</Link></li>\n                        <li><Link to=\"/my-app/contacts\">Contacts</Link></li>\n                    </ul>\n                </div>\n            </div>\n\n        </Fragment>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './index.css';\nimport { Card} from 'react-bootstrap';\nimport Header from '../Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n    Link\n  } from 'react-router-dom';\n\nconst Projects = () => {\n    return(\n        <div className=\"content\">\n            <Header/>\n            <div className=\"projects-info\">\n                <div className=\"title\">\n                    <h2>PROJECTS</h2>\n                </div>\n                <div className=\"projects-list\">\n                    <Link className='card-title' to=\"/google.com\">\n                        <Card style={{ width: '18rem', backgroundColor: '#10121B', margin: '3em 0'}}>\n                        <Card.Img variant=\"top\" src=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\" />\n                        <Card.Body>\n                            <Card.Title>React Projects</Card.Title>\n                        </Card.Body>\n                        </Card>\n                    </Link>\n                    <Link className='card-title' to=\"/google.com\">\n                        <Card style={{ width: '18rem', backgroundColor: '#10121B', margin: '4em 0'}}>\n                        <Card.Img variant=\"top\" src=\"pngwing.com.png\" />\n                        <Card.Body>\n                            <Card.Title>HTML 5 CSS 3 Projects</Card.Title>\n                        </Card.Body>\n                        </Card>\n                    </Link>\n                    <Link className='card-title' to=\"/google.com\">\n                        <Card style={{ width: '18rem', backgroundColor: '#10121B', margin: '-1em 0'}}>\n                        <Card.Img variant=\"top\" src=\"kisspng-node-js-javascript-web-application-express-js-comp-5ae0f84e5e7537.0464945815246930703869 (1).png\" />\n                        <Card.Body>\n                            <Card.Title>JavaScript Projects</Card.Title>\n                        </Card.Body>\n                        </Card>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Projects;","import React from 'react';\nimport './index.css';\n\nimport Header from '../Header';\n\nconst Home = () => {\n    return(\n        <div className='content'>\n            <Header/>\n            <div className=\"home-info\">\n                <h2>Hi, I am <span>Vasil Ivanov</span></h2>\n                <p>Highly organized and detail-oriented student from the Plovdiv University seeking an entry-level position as an programmer.</p>\n                <a className='cv-download' href=\"my-app/my-cv.pdf\" download>Download CV</a>\n            </div>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport './index.css';\nimport Header from '../Header';\n\nconst Contacts = () => {\n    return (\n        <div className='content'>\n            <Header/>\n            <div>\n                Contacts\n            </div>\n        </div>\n    )\n}\n\nexport default Contacts;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Projects from './Projects';\nimport Home from './Home';\nimport Contacts from './Contacts';\n\nfunction App() {\n  return (\n      <Router>\n      <Switch>\n        <Route path='/my-app'  render={Home} exact/>\n        <Route path='/my-app/projects'  render={Projects} />\n        <Route path='/my-app/contacts'  render={Contacts} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}